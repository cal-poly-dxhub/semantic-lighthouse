{
  "Comment": "A state machine that converts videos using MediaConvert, transcribes the audio, and processes the result.",
  "StartAt": "ProcessWithMediaConvert",
  "States": {
    "ProcessWithMediaConvert": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${MediaConvertLambdaArn}",
        "Payload": {
          "inputBucket.$": "$.detail.bucket.name",
          "inputKey.$": "$.detail.object.key",
          "outputBucket": "${OutputBucketName}",
          "outputKeyPrefix": "converted/"
        }
      },
      "ResultPath": "$.mediaConvertResult",
      "Next": "WaitForMediaConvert",
      "Retry": [
        {
          "ErrorEquals": ["States.TaskFailed"],
          "IntervalSeconds": 30,
          "MaxAttempts": 3,
          "BackoffRate": 2.0
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "MediaConvertFailed"
        }
      ]
    },
    "WaitForMediaConvert": {
      "Type": "Wait",
      "Seconds": 60,
      "Next": "CheckMediaConvertJobStatus"
    },
    "CheckMediaConvertJobStatus": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:mediaconvert:getJob",
      "Parameters": {
        "Id.$": "$.mediaConvertResult.Payload.job_ids[0]"
      },
      "ResultPath": "$.mediaConvertJobStatus",
      "Next": "IsMediaConvertFinished",
      "Retry": [
        {
          "ErrorEquals": ["States.TaskFailed"],
          "IntervalSeconds": 30,
          "MaxAttempts": 3,
          "BackoffRate": 2.0
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "MediaConvertFailed"
        }
      ]
    },
    "IsMediaConvertFinished": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.mediaConvertJobStatus.Job.Status",
          "StringEquals": "COMPLETE",
          "Next": "VerifyAudioFileExists"
        },
        {
          "Variable": "$.mediaConvertJobStatus.Job.Status",
          "StringEquals": "ERROR",
          "Next": "MediaConvertFailed"
        },
        {
          "Variable": "$.mediaConvertJobStatus.Job.Status",
          "StringEquals": "CANCELED",
          "Next": "MediaConvertFailed"
        }
      ],
      "Default": "WaitForMediaConvert"
    },
    "MediaConvertFailed": {
      "Type": "Fail",
      "Cause": "MediaConvert Job Failed",
      "Error": "The MediaConvert job failed to complete successfully."
    },
    "VerifyAudioFileExists": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${VerifyS3FileLambdaArn}",
        "Payload": {
          "s3_uri.$": "$.mediaConvertResult.Payload.audioOutputUri"
        }
      },
      "ResultPath": "$.audioFileVerification",
      "Next": "CheckAudioFileExists",
      "Retry": [
        {
          "ErrorEquals": ["States.TaskFailed"],
          "IntervalSeconds": 10,
          "MaxAttempts": 6,
          "BackoffRate": 2.0
        }
      ],
      "Catch": [
        {
          "ErrorEquals": ["States.ALL"],
          "Next": "AudioFileNotFound"
        }
      ]
    },
    "CheckAudioFileExists": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.audioFileVerification.Payload.exists",
          "BooleanEquals": true,
          "Next": "StartTranscriptionJob"
        }
      ],
      "Default": "AudioFileNotFound"
    },
    "AudioFileNotFound": {
      "Type": "Fail",
      "Cause": "Audio File Not Found",
      "Error": "The audio file generated by MediaConvert could not be found in S3."
    },
    "StartTranscriptionJob": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:transcribe:startTranscriptionJob",
      "Parameters": {
        "LanguageCode": "en-US",
        "Media": {
          "MediaFileUri.$": "$.mediaConvertResult.Payload.audioOutputUri"
        },
        "TranscriptionJobName.$": "States.Format('transcribe-{}', $$.Execution.Name)",
        "OutputBucketName": "${OutputBucketName}",
        "OutputKey": "transcripts/",
        "Settings": {
          "ShowSpeakerLabels": true,
          "MaxSpeakerLabels": 10
        }
      },
      "ResultPath": "$.startTranscriptionResult",
      "Next": "WaitForTranscription",
      "Retry": [
        {
          "ErrorEquals": ["States.TaskFailed"],
          "IntervalSeconds": 30,
          "MaxAttempts": 3,
          "BackoffRate": 2.0
        }
      ]
    },
    "WaitForTranscription": {
      "Type": "Wait",
      "Seconds": 30,
      "Next": "GetTranscriptionJobStatus"
    },
    "GetTranscriptionJobStatus": {
      "Type": "Task",
      "Resource": "arn:aws:states:::aws-sdk:transcribe:getTranscriptionJob",
      "Parameters": {
        "TranscriptionJobName.$": "$.startTranscriptionResult.TranscriptionJob.TranscriptionJobName"
      },
      "ResultPath": "$.getTranscriptionJobResult",
      "Next": "IsTranscriptionFinished"
    },
    "IsTranscriptionFinished": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.getTranscriptionJobResult.TranscriptionJob.TranscriptionJobStatus",
          "StringEquals": "COMPLETED",
          "Next": "ProcessTranscript"
        },
        {
          "Variable": "$.getTranscriptionJobResult.TranscriptionJob.TranscriptionJobStatus",
          "StringEquals": "FAILED",
          "Next": "TranscriptionFailed"
        }
      ],
      "Default": "WaitForTranscription"
    },
    "TranscriptionFailed": {
      "Type": "Fail",
      "Cause": "Transcription Job Failed",
      "Error": "The AWS Transcribe job failed to complete."
    },
    "ProcessTranscript": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Parameters": {
        "FunctionName": "${ProcessTranscriptLambdaArn}",
        "Payload": {
          "transcriptionResult": {
            "TranscriptionJob.$": "$.getTranscriptionJobResult.TranscriptionJob"
          },
          "mediaConvertResult.$": "$.mediaConvertResult",
          "originalVideoInfo": {
            "bucket.$": "$.detail.bucket.name",
            "key.$": "$.detail.object.key"
          }
        }
      },
      "ResultPath": "$.processResult",
      "End": true
    }
  }
}
